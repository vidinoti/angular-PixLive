{
  "name": "angular-pixlive",
  "tagline": "Plugin for using PixLive in hybrid Ionic app",
  "body": "# angular-pixlive\r\n[![Build Status](https://travis-ci.org/vidinoti/angular-pixlive.svg?branch=master)](https://travis-ci.org/vidinoti/angular-pixlive)\r\n\r\nPlugin for using PixLive SDK in Ionic framework.\r\n\r\n## Documentation\r\n\r\nThe documentation is available at [http://vidinoti.github.io/angular-pixlive/docs](http://vidinoti.github.io/angular-pixlive/docs).\r\n\r\n## Using the Augmented Reality View\r\n\r\nFollow the following steps do add an augmented reality view in your Ionic project:\r\n\r\n* Add the plugin to your Ionic project: \r\n  \r\n  `ionic add vidinoti/angular-pixlive`\r\n* Add the Cordova plugin for PixLive SDK to your Ionic project:\r\n\r\n  ```bash\r\n  ionic plugin add cordova-plugin-pixlive  --variable LICENSE_KEY=MyLicenseKey \\\r\n      --variable PIXLIVE_SDK_IOS_LOCATION=\\\"/home/PixLiveSDKiOS/VDARSDK.framework\\\"\r\n      --variable PIXLIVE_SDK_ANDROID_LOCATION=\\\"/home/PixLiveSDKAndroid/vdarsdk-release.aar\\\"\r\n  ```\r\n  \r\n  where the paths corresponds to the location for iOS and Android of the framework and AAR files. **Do not remove the backslashes before and after the quotes (i.e. \\\") or the command will fail.**\r\n\r\n* Add JS Bundle file in you index.html: \r\n  \r\n  `<script src=\"lib/angular-pixlive/js/PixLive.bundle.js\"></script>` \r\n* Add the `pixlive` angular module to be loaded with your app. It should like similar to:\r\n  \r\n  ```js\r\nangular.module('myApp', ['ionic', 'myApp.controllers', 'myApp.services', 'pixlive'])\r\n  ```\r\n* Optionally set up push notification in your app.js, in the init part: \r\n\r\n  ```js\r\nif(window.cordova && window.cordova.plugins) {\r\n    //Enable notifications\r\n    cordova.plugins.PixLive.setNotificationsSupport(true,'GoogleProjectID');\r\n}\r\n  ```\r\n  \r\n  where `GoogleProjectID` corresponds to the ID of the Google project you created in the Google Developer console.\r\n\r\n* You can also enable bookmark support (user will be able to bookmark some content. You can then create a view with all the bookmarked content): \r\n\r\n  ```js\r\nif(window.cordova && window.cordova.plugins) {\r\n    //Enable bookmark support\r\n    cordova.plugins.PixLive.setBookmarkSupport(true);\r\n}\r\n  ```\r\n\r\n* Add an Augmented Reality view in one of your Ionic views. Note that content inserted within the view will be displayed on top of the AR camera view.\r\n  \r\n  ```html\r\n<ion-view view-title=\"PixLive\" style=\"background-color: transparent !important;\">\r\n  <pxl-view>\r\n    <!-- You can insert other elements here to create overlays -->\r\n  </pxl-view>\r\n</ion-view>\r\n  ```\r\n\r\n  **Warning**: The camera view is inserted **below** your Ionic app. Therefore you need to make sure to have your view transparent where the camera should appear. As above, set the CSS property `background-color` to `transparent` on your ion-view as well as on your ion-tabs, if any.\r\n\r\n## Synchronizing content from PixLive Maker\r\n\r\nPixLive Maker is a platform that allows anyone to create content for your app embeding PixLive SDK.\r\n\r\nYour app needs to be synchronized with PixLive Maker so that the content can be used within the app.\r\n\r\nTo do so, the plugin exposes a `PxlRemoteController` service allowing you to request synchronizations of the contexts / AR content. This can be done anywhere in your controllers or at app launch time. The plugin make sure that everything is ready before issuing the call so it's safe to use it anywhere.\r\n\r\nExample of usage within a controller constructor:\r\n\r\n```js\r\nmyApp.controller('PixLiveCtrl', function($scope, $ionicLoading, $compile, PxlRemoteController, $ionicPopup) {\r\n    // Trigger a synchronization with the tag *test*\r\n    // You can pass an empty array to synchronize with all the contexts.\r\n    PxlRemoteController.synchronize(['test']).then(function(contexts) {\r\n        console.log('Syncronization OK: ');\r\n        console.log(contexts);\r\n    }, function(reason) {\r\n        $ionicPopup.alert({\r\n            title: 'PixLive Synchronization Error',\r\n            template: reason\r\n        });\r\n    }, function(progress) {\r\n        console.log('Synchronization progress: '+progress);\r\n    });\r\n});\r\n```\r\n\r\n## Directives for events\r\n\r\nThe following directives can be used **as attribute** on any elements to get the associated events from the PixLive SDK:\r\n\r\n* pxlContextEnter\r\n* pxlContextExit\r\n* pxlCodeRecognize\r\n* pxlAnnotationsPresent\r\n* pxlAnnotationsHide\r\n* pxlSynchronizationRequired\r\n* pxlSensorTriggered\r\n* pxlSensorUpdate\r\n* pxlSensorUntriggered\r\n\r\nIt can be used for example as follow in your HTML template:\r\n\r\n```\r\n<ion-view view-title=\"AR\" style=\"background-color: transparent !important;\">\r\n  <pxl-view pxl-context-enter=\"contextEnter\">\r\n    \r\n  </pxl-view>\r\n</ion-view>\r\n```\r\n\r\nThis will call the `contextEnter` on the controller linked with the view when an image or a iBeacon is detected. The context ID is passed as a parameter to the contextEnter method.\r\n\r\nSee the directives' doc for more information.\r\n\r\n## How to build\r\n\r\n```\r\nnpm install -g grunt-cli\r\nnpm install\r\ngrunt\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}